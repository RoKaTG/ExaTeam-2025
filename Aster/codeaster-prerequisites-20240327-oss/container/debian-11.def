Bootstrap: docker
From: nexus.retd.edf.fr:5012/debian:bullseye

%labels
Author code_aster team http://www.code-aster.org
NB: This image is configured to use private apt mirrors.

%files
VERSION /opt/repo/
archives /opt/repo/
makefile /opt/repo/
reqs /opt/repo/
patches /opt/repo/
src /opt/repo/
utils /opt/repo/
container/starter_script /opt/devscripts/
container/install_script /opt/devscripts/

%environment
export LC_ALL=fr_FR.UTF-8
export LANG=fr_FR.UTF-8
export PATH=/opt/venv/bin:${PATH}

%post
# +++ using private repositories for download
PIP_OPTIONS="--trusted-host nexus.retd.edf.fr --index-url https://nexus.retd.edf.fr/repository/pypi-all/simple"

PREF=codeaster-prerequisites
PREREQ_ARCH=gcc-openblas-ompi${PREREQ_ARCH_SUFFIX}

# +++ install debian packages
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get upgrade -y

# use '--no-install-recommends' for a lighter image
apt install -y \
    apt-utils \
    aspell \
    aspell-fr \
    bash-completion \
    bison \
    ccache \
    clang-13 \
    clang-format-13 \
    cmake \
    curl \
    flex \
    g++ \
    gcc \
    gdb \
    gettext \
    gfortran \
    git \
    graphviz \
    imagemagick \
    less \
    libboost-chrono-dev \
    libboost-date-time-dev \
    libboost-filesystem-dev \
    libboost-python-dev \
    libboost-regex-dev \
    libboost-serialization-dev \
    libboost-system-dev \
    libboost-thread-dev \
    libglu1-mesa \
    libncurses5 \
    libomp-13-dev \
    libopenblas-dev \
    libopenmpi-dev \
    libunwind-dev \
    libxcursor1 \
    libxml2-dev \
    lmod \
    locales \
    mercurial \
    nano \
    net-tools \
    openmpi-bin \
    pkg-config \
    procps \
    python3-dev \
    python3-numpy \
    python3-pip \
    python3-scipy \
    python3-sphinx \
    python3-texext \
    python3-venv \
    python3-yaml \
    swig \
    tk \
    valgrind \
    vim \
    wget \
    zlib1g-dev \
# end
    # gnupg \
    # reptyr \
    # tmux \
    # xvfb \
#

# fix locales
sed -i \
    -e 's/# fr_FR.UTF/fr_FR.UTF/g' \
    -e 's/# fr_CA.UTF/fr_CA.UTF/g' \
    -e 's/# en_US.UTF/en_US.UTF/g' \
    -e 's/# en_GB.UTF/en_GB.UTF/g' \
    /etc/locale.gen
locale-gen

# cleanup
apt-get clean
rm -rf /var/lib/apt/lists/* /var/tmp/*

# exit now to keep the base system
# exit 0

# +++ add specific dependencies
wrkdir=/opt/repo
tmpdir=${wrkdir}/tmpdir
mkdir -p ${tmpdir}
VERSION=$(. ${wrkdir}/VERSION ; echo ${VERSION})

# create venv
python3 -m venv --system-site-packages /opt/venv
export PATH=/opt/venv/bin:${PATH}

# development tools
cd ${tmpdir}
python3 -m pip install ${PIP_OPTIONS} --upgrade pip
python3 -m pip install ${PIP_OPTIONS} -r ${wrkdir}/reqs/requirements_dev.txt
# avoid manual installation
mpi4py_spec=$(. ${wrkdir}/VERSION ; printf "mpi4py==${MPI4PY}")
python3 -m pip install ${PIP_OPTIONS} "${mpi4py_spec}"
ln -s /usr/bin/clang-format-13 /usr/local/bin/clang-format

# +++ build prerequisites
cd ${wrkdir}
export DISTR=debian-11
# use RESTRICTED=0 if build from a '-oss' archive
make ROOT=/opt/public ARCH=${PREREQ_ARCH} RESTRICTED=1 check
make ROOT=/opt/public ARCH=${PREREQ_ARCH} RESTRICTED=1 setup_venv
make ROOT=/opt/public ARCH=${PREREQ_ARCH} RESTRICTED=1

# add as_run in PATH
ln -s /opt/public/${VERSION}/${PREREQ_ARCH}/asrun-*/bin/as_run /usr/local/bin/as_run
ln -s /opt/public/${VERSION}/${PREREQ_ARCH}/asrun-*/bin/astk /usr/local/bin/astk

# keep requirements list
cp ${wrkdir}/reqs/requirements*.txt /opt/public/${VERSION}/

# copy environment files to /opt/public
cd /opt/public
cp ${VERSION}/${PREREQ_ARCH}/*.sh .

# keep developers scripts in /opt/devscripts
HWLOC_EMBEDDED=$(python3 -c 'import os;print(":".join(os.listdir("/usr/lib/x86_64-linux-gnu/hwloc")))')
sed -i \
    -e "s#_USED_FOR_#${PREF}-${DISTR}#g" \
    -e "s#_HWLOC_EMBEDDED_#${HWLOC_EMBEDDED}#g" \
    /opt/devscripts/*
chmod 755 /opt/devscripts/*

# cleanup
rm -rf ${tmpdir}
rm -rf ${wrkdir}

%help
This is a Singularity image of code_aster prerequisites.

It is recommended to execute the image using its starter script.

Install the starter script with:

    singularity run --app install <image-name>.sif

Some checkings may be run with:

    singularity run --app check <image-name>.sif

Then, see the available options of the starter script using:

    ./<image-name> --help

%apprun install
exec /opt/devscripts/install_script
